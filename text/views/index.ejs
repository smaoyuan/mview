<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8" />
    <title>Documents</title>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/css/select2.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.7.1/jquery.contextMenu.min.css">
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <link rel="stylesheet" href="./css/style.css" />
    <link rel="stylesheet" href="index.css">
    <style>
      .node {}.link {} 
      .container {  
        display: grid !important;
        grid-template-columns: 1fr 1fr 1fr !important;
        max-width: 0 !important;
        margin: 0 !important;
        grid-gap: 5px !important;
        border: none !important;
        text-align: center !important;
        padding: 10px !important;
      }

      .heading {
        border-bottom: 2px solid !important;
        font-weight: bold !important;
        border-top: 2px solid !important;
        padding: 0 !important;
      }
    </style>
  </head>
  <body>
    <div class="left">
      <select
        id='fileSelect'
        name=""
        placeholder="Select Doc"
        style='width:100%;'
      >
        <%
        const keys = Object.keys(files)
        for (const key of keys) {
         %>
        <option value="<%=key %>"  ><%=key.split(".").slice(0, -1).join(".") %></option>
        <% } %>
      </select>
      
      <div class="button-wrapper">
        <input type="button" value="Display Matrix" class="matrix-button">
        <input type="button" value="Display Graph" class="graph-button">
        <input type="button" value="Display Bubble Map" class="bubble-map-button" disabled>
      </div>
    </div>
    <svg id="line-canvas" width="100%">
      <g></g>
    </svg>
    <div class="right" id="board">
      <div class="all-data-box note the-node custom-data" data-dialog="graph">
        <div class='close_note'>X</div>
        <h3>Graph Header</h3>
        <div class="all-data-wrapper">
          <p class="all-data"></p>
        </div>
      </div>
      <div class="matrix-data-box note the-node custom-data">
        <div class='close_note'>X</div>
        <h3>Matrix Header</h3>
        <p class="matrix-data"></p>
      </div>

      <div class="bubblemap-box note the-node custom-data" data-dialog="bubble-map">
        <div class='close_note'>X</div>
        <h3>Bubble Map Header</h3>
        <div class="bubblemap-wrapper">
          <p class="bubblemap">
            <span class="loading-text">Please wait while data is being fetched...</span>
            <svg id="bubbleMap" width="630" height="350"></svg>
          </p>
        </div>
      </div>
    </div>

    <ul class="custom-menu">
      <li class="menu-item">Highlight Test</li>
      <li class="menu-item">Unhighlight Text</li>
      <li class="menu-item">Option 3</li>
    </ul>

    <ul class="svg-custom-menu">
    </ul>

    <!-- <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/js/select2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.7.1/jquery.contextMenu.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.7.1/jquery.ui.position.js"></script>
    <script src="https://d3js.org/d3.v4.min.js" type="text/javascript"></script>
    <script src="https://d3js.org/d3-selection-multi.v1.js"></script>
    <script src="./dom-to-image.js"></script>
    <script src="./panzoom.min.js"></script>
    <script src="https://d3js.org/d3-geo-projection.v2.min.js"></script>
    <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>

    <script>
      var bubbleMapSVG = d3.select("#bubbleMap");
      var projection, personsCollection = [];

      var lineCanvas = document.getElementById('line-canvas');
      var globalG = lineCanvas.childNodes[1];

      let pObj, connections = [], connections2 = [], documentData;

      var foreign = document.createElementNS('http://www.w3.org/2000/svg',"foreignObject");
      foreign.setAttribute('width', '85%');
      foreign.setAttribute('height', '100vh');
      foreign.setAttribute('id', 'boardG');
      foreign.appendChild(document.getElementById('board'));
      globalG.appendChild(foreign);

      let positions = {
        'graph' : {
            x : 0,
            y : 0
        },
        'bubble-map':{
            x : 0,
            y : 0
        },
        'highlight-text':{
            x : 0,
            y : 0
        }
      }

      const accessor = {
        x1 : function (d) {
          return positions[d.source.id].x + d.source.xOffset
        },
        y1 : function (d) {
            return positions[d.source.id].y + d.source.yOffset
        },
        x2 : function (d) {
            return positions[d.target.id].x + d.target.xOffset
        },
        y2 : function (d) {
            return positions[d.target.id].y + d.target.yOffset
        }
      }

      function getDocumentData() {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 201) {
            documentData = JSON.parse(this.responseText).documentData;
          }
        };
        xhttp.open("GET", "http://localhost:3000/getDocumentData", true);
        xhttp.send();
      }

      function lineFunc(d){
        let data = [[accessor.x1(d), accessor.y1(d)],
            [accessor.x2(d), accessor.y2(d)]];
        return d3.line().curve(d3.curveBasis)(data);
      }

      function drawBubbleMap() {
        width = +bubbleMapSVG.attr("width"),
        height = +bubbleMapSVG.attr("height");

        // Map and projection
        projection = d3.geoMercator()
            .center([0,20])
            .scale(99)
            .translate([ width/2, height/2 ])

        d3.queue()
          .defer(d3.json, "https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson")  // World shape
          .defer(d3.csv, "./map-data.csv")
          .await(ready);
      }

      function ready(error, dataGeo, data) {
        var allContinent = d3.map(data, function(d){return(d.continent)}).keys()
        var color = d3.scaleOrdinal()
          .domain(allContinent)
          .range(d3.schemePaired);

        var valueExtent = d3.extent(data, function(d) { return +d.n; })
        var size = d3.scaleSqrt()
          .domain(valueExtent)
          .range([ 1, 50])

          bubbleMapSVG.append("g")
            .selectAll("path")
            .data(dataGeo.features)
            .enter()
            .append("path")
              .attr("fill", "#b8b8b8")
              .attr("d", d3.geoPath()
                  .projection(projection)
              )
            .style("stroke", "none")
            .style("opacity", .3)

          bubbleMapSVG
            .selectAll("myCircles")
            .data(data.sort(function(a,b) { return +b.n - +a.n }).filter(function(d,i){ return i<1000 }))
            .enter()
            .append("circle")
              .attr("cx", function(d){ return projection([+d.lng, +d.lat])[0] })
              .attr("cy", function(d){ return projection([+d.lng, +d.lat])[1] })
              .attr("r", function(d){ return 5 }) //size(+d.n)
              .style("fill", function(d){ return '#9B89DC' })
              .attr("stroke", function(d){ if(d.n>2000){return "black"}else{return "none"}  })
              .attr("stroke-width", 1)
              .attr("fill-opacity", .4)
              .attr("data-name", function (d) {
                return d.name;
              })
              .attr("data-docId", function (d) {
                return d.docId;
              })
              .attr("data-docText", function (d) {
                return d.docText;
              })
              .attr("data-location", function (d) {
                return d.location;
              })
              .on("mouseup", mapClick);
          
              $('.bubblemap-box').on('drag', reDrawLines);
              $('.all-data-box').on('drag', reDrawLines2);

        document.querySelector('.loading-text').style.display = 'none';  
      }

      function reDrawLines() {
        if (lineDataCollection.length > 0) {
          lineDataCollection = [];
          connections.forEach(function(ele) {
            computeLineCoordinates(ele, personsCollection, 'person');
          });
          drawPolyLine();
        }

        bubbleToTextCollection = [];
        connections2.forEach(conn => {
          const ele = conn.source;
          let x1Loc = parseFloat($('.' + this.classList[0]).css('left').split('px')[0]) + ele.getBBox().x + ele.getBBox().width;
          let y1Loc = parseFloat($('.' + this.classList[0]).css('top').split('px')[0]) + ele.getBBox().y + (ele.getBBox().height/2) + 37;

          let x2Loc = parseFloat(conn.target.css('left').split('px')[0]) + conn.target.find('.highlighted-text').position().left;
          let y2Loc = parseFloat(conn.target.css('top').split('px')[0]) + conn.target.find('.highlighted-text').position().top;

          bubbleToTextCollection.push({
            source : {
              id: "bubble-map",
              xOffset : x1Loc,
              yOffset : y1Loc
            },
            target : {
              id: "highlight-text",
              xOffset : x2Loc,
              yOffset : y2Loc
            }
          });
        });

        if(bubbleToTextCollection.length > 0) {
          drawPolyLine2(bubbleToTextCollection);
        }
      }

      function reDrawLines2() {
        bubbleToTextCollection = [];
        connections2.forEach(conn => {
          const ele = conn.source;

          let x1Loc = d3.select(ele.parentElement).attr('transform').split('(')[1];
          x1Loc = parseFloat(x1Loc.split(',')[0]);
          x1Loc = (x1Loc/2 - 90) + ($('.all-data-box').css('left') ? parseFloat($('.all-data-box').css('left').split('px')[0]) : 0);
          
          let y1Loc = d3.select(ele.parentElement).attr('transform').split(')')[0];
          y1Loc = parseFloat(y1Loc.split(',')[1]);
          y1Loc = (y1Loc/2 - 18) + ($('.all-data-box').css('top') ? parseFloat($('.all-data-box').css('top').split('px')[0]) : 0);

          let x2Loc = parseFloat(conn.target.css('left').split('px')[0]) + conn.target.find('.highlighted-text').position().left;
          let y2Loc = parseFloat(conn.target.css('top').split('px')[0]) + conn.target.find('.highlighted-text').position().top + 5;

          bubbleToTextCollection.push({
            source : {
              id: "bubble-map",
              xOffset : x1Loc,
              yOffset : y1Loc
            },
            target : {
              id: "highlight-text",
              xOffset : x2Loc,
              yOffset : y2Loc
            }
          });
        })

        if(bubbleToTextCollection.length > 0) {
          drawPolyLine2(bubbleToTextCollection);
        }
      }

      let bubbleToTextCollection = [];
      function mapClick() {
        if(window.getSelection) {
          let selection = window.getSelection();
          if(event.button === 2) {
            let $event = event;
            let ele = $event.target;
            let content = event.target.getAttribute('data-docText');
            let id = event.target.getAttribute('data-docId');
            let loc = event.target.getAttribute('data-location');
            const fE = event.target;
            const rightCustomMenu = document.querySelector('.svg-custom-menu');

            rightCustomMenu.innerHTML = `<li class="svg-menu-item-${id} svg-menu-item">Show Relevant Text</li>`
            rightCustomMenu.style.display = 'block';
            rightCustomMenu.style.left = event.clientX + 'px';
            rightCustomMenu.style.top = event.clientY + 'px';

            document.querySelector(`.svg-menu-item-${id}`).addEventListener('click', function(e) {
              document.querySelector('.svg-custom-menu').style.display = 'none';
              content = content.replace(loc, `<span class=highlighted-text>${loc}</span>`);

              var note = `
              <div class="note the-node" id='`+ id +`' style="z-index: 999;">
                <div class='close_note'>X</div>
                <h3>`+ loc +`</h3>
                <p style="cursor:text;">
                  `+ content +`
                </p>
              </div>
              `;
              $("#board").append(note);
              $(".note#" + id).css('z-index',99).draggable({
                containment: "#board",
                grid: [5, 5],
                cancel: "p"
              });

              let filteredData = documentData.filter((data) => {
                if(data.location.indexOf(loc) !== -1) {
                  return data.docId;
                }
              });

              filteredData.forEach(data => {
                data.name.forEach(p => {
                  const personIndex = personsCollection.indexOf(p);
                  if(personIndex !== -1) {
                    d3.select('[data-name=person' + personIndex + '] circle').attr('r', 25);
                  }
                })
              });

              let x1Loc = parseFloat($('.bubblemap-box').css('left').split('px')[0]) + ele.getBBox().x + ele.getBBox().width;
              let y1Loc = parseFloat($('.bubblemap-box').css('top').split('px')[0]) + ele.getBBox().y + (ele.getBBox().height/2) + 37;

              let x2Loc = parseFloat($('#' + id).css('left').split('px')[0]) + $('#' + id).find('.highlighted-text').position().left;
              let y2Loc = parseFloat($('#' + id).css('top').split('px')[0]) + $('#' + id).find('.highlighted-text').position().top + 5;

              bubbleToTextCollection.push({
                source : {
                  id: "bubble-map",
                  xOffset : x1Loc,
                  yOffset : y1Loc
                },
                target : {
                  id: "highlight-text",
                  xOffset : $('#' + id + ' .highlighted-text').position().left,
                  yOffset : $('#' + id + ' .highlighted-text').position().top
                }
              });

              connections2.push({ source: ele, target: $('#' + id) });

              drawPolyLine2(bubbleToTextCollection);

              $('#' + id).on('drag', function() {
                bubbleToTextCollection = [];
                connections2.forEach(conn => {
                  const ele = conn.source;
                  let x1Loc = parseFloat($('.bubblemap-box').css('left').split('px')[0]) + ele.getBBox().x + ele.getBBox().width;
                  let y1Loc = parseFloat($('.bubblemap-box').css('top').split('px')[0]) + ele.getBBox().y + (ele.getBBox().height/2) + 37;

                  let x2Loc = parseFloat(conn.target.css('left').split('px')[0]) + conn.target.find('.highlighted-text').position().left;
                  let y2Loc = parseFloat(conn.target.css('top').split('px')[0]) + conn.target.find('.highlighted-text').position().top + 5;

                  bubbleToTextCollection.push({
                    source : {
                      id: "bubble-map",
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "highlight-text",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
                })
                drawPolyLine2(bubbleToTextCollection);
              });
            });
          } else {
            if(this.nodeName === 'circle') {
              connections.push(this);
              computeLineCoordinates(this, personsCollection, 'person');
            } else {
              if(connections.length > 0) {
                const ele = connections[0];
                  computeLineCoordinates(ele, personsCollection, 'person');
                }
              }
            drawPolyLine(lineDataCollection);
          }
        }
      }

      let lineDataCollection = [];
      function computeLineCoordinates(ele, personsCollection, dataType) {
        if(dataType === 'person') {
            positions = {
              'graph' : {
                  x : 0,
                  y : 0
              },
              'bubble-map':{
                  x : 0,
                  y : 0
              },
              'highlight-text':{
                  x : 0,
                  y : 0
              }
          }

          const personIndex = personsCollection.indexOf($(ele).attr('data-name'));
          let x1Loc = parseFloat($('.bubblemap-box').css('left').split('px')[0]) + ele.getBBox().x + ele.getBBox().width;
          let y1Loc = parseFloat($('.bubblemap-box').css('top').split('px')[0]) + ele.getBBox().y + (ele.getBBox().height/2) + 37;

          let x2Loc = d3.select('[data-name=person' + personIndex + ']').attr('transform').split('(')[1];
          x2Loc = parseFloat(x2Loc.split(',')[0]);
          x2Loc = (x2Loc/2 - 90) + parseFloat($('.all-data-box').css('left').split('px')[0]);
          
          let y2Loc = d3.select('[data-name=person' + personIndex + ']').attr('transform').split(')')[0];
          y2Loc = parseFloat(y2Loc.split(',')[1]);
          y2Loc = (y2Loc/2 - 18) + parseFloat($('.all-data-box').css('top').split('px')[0]);

          lineDataCollection.push({
            source : {
              id: "bubble-map",
              xOffset : x1Loc,
              yOffset : y1Loc
            },
            target : {
              id: "graph",
              xOffset : x2Loc,
              yOffset : y2Loc
            }
          });
        } else {
          positions = {
            'graph' : {
                x : 0,
                y : 0
            },
            'bubble-map':{
                x : 0,
                y : 0
            },
            'highlight-text':{
                x : 0,
                y : 0
            }
          }

          let x1Loc = d3.select(ele).attr('transform').split('(')[1];
          x1Loc = parseFloat(x1Loc.split(',')[0]);
          x1Loc = (x1Loc/2 - 90) + $('.all-data-box').css('left') ? parseFloat($('.all-data-box').css('left').split('px')[0]) : 0;
          
          let y1Loc = d3.select(ele).attr('transform').split(')')[0];
          y1Loc = parseFloat(y1Loc.split(',')[1]);
          y1Loc = (y1Loc/2 - 18) + $('.all-data-box').css('top') ? parseFloat($('.all-data-box').css('top').split('px')[0]) : 0;

          let cir = ele.querySelector('circle');
          let nodeName = cir.getAttribute('data-name');
          documentData.filter((data) => {
            if(data.name[0] === nodeName) {
              if(data.location.length > 0) {
                let x2Loc = parseFloat(d3.select(`[data-location=${data.location[0]}]`).attr('cx')) + parseFloat($('.bubblemap-box').css('left').split('px')[0]);
                let y2Loc = parseFloat(d3.select(`[data-location=${data.location[0]}]`).attr('cy')) + parseFloat($('.bubblemap-box').css('top').split('px')[0]);

                lineDataCollection.push({
                  source : {
                    id: "graph",
                    xOffset : x2Loc,
                    yOffset : y2Loc
                  },
                  target : {
                    id: "bubble-map",
                    xOffset : x1Loc,
                    yOffset : y1Loc
                  }
                });
              }
            }
          });
        }
        
      }

      function drawPolyLine(collection = lineDataCollection) {
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-new')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-new')
              .merge(linkUpdate)
          .attr('d',lineFunc)
          .style('stroke', '#95c7f4')
          .style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }

      function drawPolyLine2(collection) {
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-new1')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-new1')
              .merge(linkUpdate)
          .attr('d',lineFunc)
          .style('stroke', '#95c7f4')
          .style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }

      function processMatrix() {
        var colors = d3.scaleOrdinal(d3.schemeCategory10);

        var svg = d3.select(".all-data svg"),
          width = +svg.attr("width"),
          height = +svg.attr("height"),
          node,
          link;

        d3.select("body")
          .append("div")
          .attr("id", "tooltip")
          .attr("style", "position: absolute; opacity: 0;");

        var simulation = d3
          .forceSimulation()
          .force(
            "link",
            d3
              .forceLink()
              .id(function (d) {
                return d.id;
              })
              .distance(200)
              .strength(0)
          )
          .force("charge", d3.forceManyBody())
          .force("center", d3.forceCenter(width / 3, height / 2));

        d3.json("graph.json", function (error, graph) {
          if (error) throw error;
          
          graph.nodes.forEach(node => {
            personsCollection.push(node.name);
          });

          const nodesValue = graph.nodes.map((x) => x.name);
          const nameLinks = graph.links.map((x) => {
            return {
              source: nodesValue[x.source - 1],
              target: nodesValue[x.target - 1],
              type: x.type,
            };
          });

          const totalSource = Array.from(new Set(nameLinks.map((x) => x.source)));
          const totalTarget = Array.from(new Set(nameLinks.map((x) => x.target)));
          const uniqArray = Array.from(new Set(totalSource.concat(totalTarget)));
          document.documentElement.style.setProperty(
            "--totalcolsRows",
            `repeat(${uniqArray.length}, minmax(3rem, 1fr))`
          );

          let html = "<div id='mat'>";
          for (let i = 0; i < uniqArray.length; i++) {
            html += `<div>`;
            for (let j = 0; j < uniqArray.length; j++) {
              html += `<div id='id_${uniqArray[i]
                .toString()
                .replace(/ /g, "")}${uniqArray[j]
                .toString()
                .replace(/ /g, "")}'>0</div>`;
            }
            html += `</div>`;
          }
          html += "</div>";

          document.querySelector("#matrix").innerHTML = html;

          let top_heading = ``;
          uniqArray.map((x) => (top_heading += `<div>${x}</div>`));
          document.querySelector("#top").innerHTML = top_heading;
          document.querySelector("#side").innerHTML = top_heading;
          setTimeout(() => {
            nameLinks.map((x) => {
              document.querySelector(
                `#id_${x.source
                  .toString()
                  .replace(/ /g, "")}${x.target.toString().replace(/ /g, "")}`
              ).innerText = x.type;
              document.querySelector(
                `#id_${x.target
                  .toString()
                  .replace(/ /g, "")}${x.source.toString().replace(/ /g, "")}`
              ).innerText = x.type;
            });
          }, 2000);

          update(graph.links, graph.nodes, svg, colors, simulation);
        });
      }
      

      function update(links, nodes, svg, colors, simulation) {
        link = svg
          .selectAll(".link")
          .data(links)
          .enter()
          .append("line")
          // .style("stroke-dasharray", "10,2")
          .style("stroke", function (d, i) {
            return colors(i);
          })
          .attr("stroke-opacity", (d) => d.type * 0.4)
          .attr("class", "link");

        edgepaths = svg
          .selectAll(".edgepath")
          .data(links)
          .enter()
          .append("path")
          .attrs({
            class: "edgepath",
            "fill-opacity": 0,
            "stroke-opacity": 0,
            id: function (d, i) {
              return "edgepath" + i;
            },
          })
          .style("pointer-events", "none");

        edgelabels = svg
          .selectAll(".edgelabel")
          .data(links)
          .enter()
          .append("text")
          .style("pointer-events", "none")
          .attrs({
            class: "edgelabel",
            id: function (d, i) {
              return "edgelabel" + i;
            },
            "font-size": 14,
            fill: "#888",
          });

        edgelabels
          .append("textPath")
          .attr("xlink:href", function (d, i) {
            return "#edgepath" + i;
          })
          .style("text-anchor", "middle")
          .style("pointer-events", "none")
          .attr("startOffset", "50%")
          .text(function (d) {
            return d.type;
          });

        node = svg
          .selectAll(".node")
          .data(nodes)
          .enter()
          .append("g")
          .attr("class", "node")
          .on("mouseup", graphConnector)
          .attr('data-name', function(d, i) {
            return 'person' + i;
          });
        // .call(d3.drag().on("start", dragstarted).on("drag", dragged));

        node
          .append("circle")
          .attr("r", 5)
          .attr('data-name', function (d) {
            return d.name;
          })
          .style("fill", function (d, i) {
            return colors(i);
          })
          .on("mouseup", graphClick);

        node.append("title").text(function (d) {
          return d.connection;
        });

        node
          .append("text")
          .attr("dy", -3)
          .text(function (d) {
            return d.name;
          });

        simulation.nodes(nodes).on("tick", ticked);

        simulation.force("link").links(links);
        $('.all-data-box').on('drag', reDrawLines2);
      }

      function graphConnector() {
        if(this.nodeName === 'g') {
            connections.push(this);
            computeLineCoordinates(this, [], 'graph');
          }
        drawPolyLine();
      }

      function graphClick() {
        if(window.getSelection) {
          let selection = window.getSelection();
          if(event.button === 2) {
            let $event = event;
            let ele = $event.target;
            let nodeName = event.target.getAttribute('data-name');

            let filteredData = documentData.filter((data) => {
              if(data.name.indexOf(nodeName) !== -1) {
                let content = data.docText;
                let id = data.docId;
                let loc = data.location;
                const rightCustomMenu = document.querySelector('.svg-custom-menu');

                rightCustomMenu.innerHTML = `<li class="svg-menu-item-${id} svg-menu-item">Show Relevant Text</li>`
                rightCustomMenu.style.display = 'block';
                rightCustomMenu.style.left = event.clientX + 'px';
                rightCustomMenu.style.top = event.clientY + 'px';

                document.querySelector(`.svg-menu-item-${id}`).addEventListener('click', function(e) {
                  document.querySelector('.svg-custom-menu').style.display = 'none';
                  content = content.replace(nodeName, `<span class=highlighted-text>${nodeName}</span>`);

                  var note = `
                  <div class="note the-node" id='`+ id +`' style="z-index: 999;">
                    <div class='close_note'>X</div>
                    <h3>`+ nodeName +`</h3>
                    <p style="cursor:text;">
                      `+ content +`
                    </p>
                  </div>
                  `;
                  $("#board").append(note);
                  $(".note#" + id).css('z-index',99).draggable({
                    containment: "#board",
                    grid: [5, 5],
                    cancel: "p"
                  });

                  document.querySelectorAll(`[data-docId='${id}']`).forEach(docEle => {
                    docEle.style = 'fill: red !important';
                  });

                  let x1Loc = d3.select(ele.parentElement).attr('transform').split('(')[1];
                  x1Loc = parseFloat(x1Loc.split(',')[0]);
                  x1Loc = (x1Loc/2 - 90) + ($('.all-data-box').css('left') ? parseFloat($('.all-data-box').css('left').split('px')[0]) : 0);
                  
                  let y1Loc = d3.select(ele.parentElement).attr('transform').split(')')[0];
                  y1Loc = parseFloat(y1Loc.split(',')[1]);
                  y1Loc = (y1Loc/2 - 18) + ($('.all-data-box').css('top') ? parseFloat($('.all-data-box').css('top').split('px')[0]) : 0);

                  let x2Loc = parseFloat($('#' + id).css('left').split('px')[0]) + $('#' + id).find('.highlighted-text').position().left;
                  let y2Loc = parseFloat($('#' + id).css('top').split('px')[0]) + $('#' + id).find('.highlighted-text').position().top + 10;

                  bubbleToTextCollection.push({
                    source : {
                      id: "bubble-map",
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "highlight-text",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });

                  connections2.push({ source: ele, target: $('#' + id) });
                  
                  $('#' + id).on('drag', function() {
                    bubbleToTextCollection = [];
                    connections2.forEach(conn => {
                      const ele = conn.source;

                      let x1Loc = d3.select(ele.parentElement).attr('transform').split('(')[1];
                      x1Loc = parseFloat(x1Loc.split(',')[0]);
                      x1Loc = (x1Loc/2 - 90) + ($('.all-data-box').css('left') ? parseFloat($('.all-data-box').css('left').split('px')[0]) : 0);
                      
                      let y1Loc = d3.select(ele.parentElement).attr('transform').split(')')[0];
                      y1Loc = parseFloat(y1Loc.split(',')[1]);
                      y1Loc = (y1Loc/2 - 18) + ($('.all-data-box').css('top') ? parseFloat($('.all-data-box').css('top').split('px')[0]) : 0);

                      let x2Loc = parseFloat(conn.target.css('left').split('px')[0]) + conn.target.find('.highlighted-text').position().left;
                      let y2Loc = parseFloat(conn.target.css('top').split('px')[0]) + conn.target.find('.highlighted-text').position().top + 5;

                      bubbleToTextCollection.push({
                        source : {
                          id: "bubble-map",
                          xOffset : x1Loc,
                          yOffset : y1Loc
                        },
                        target : {
                          id: "highlight-text",
                          xOffset : x2Loc,
                          yOffset : y2Loc
                        }
                      });
                    })
                    drawPolyLine2(bubbleToTextCollection);
                  });

                  drawPolyLine2(bubbleToTextCollection);
                });

                return data.docId;
              }
            });

            document.querySelectorAll('.menu-item')[1].addEventListener('click', function(e) {
              document.querySelector('.custom-menu').style.display = 'none';
              if(fE.tagName === 'FONT') {
                $(fE).unwrap();
                $($(fE)[0].childNodes[0]).unwrap()
              }
            });
          }
        }
      }

      function ticked() {
        link
          .attr("x1", function (d) {
            return d.source.x;
          })
          .attr("y1", function (d) {
            return d.source.y;
          })
          .attr("x2", function (d) {
            return d.target.x;
          })
          .attr("y2", function (d) {
            return d.target.y;
          })
          .on("mouseover", function (d) {
            d3.select("#tooltip")
              .transition()
              .duration(200)
              .style("opacity", 1)
              .text(d.type);
          })
          .on("mouseout", function () {
            d3.select("#tooltip").style("opacity", 0);
          })
          .on("mousemove", function () {
            d3.select("#tooltip")
              .style("left", d3.event.pageX + "px")
              .style("top", d3.event.pageY + "px");
          });

        node.attr("transform", function (d) {
          return "translate(" + d.x + ", " + d.y + ")";
        });

        edgepaths.attr("d", function (d) {
          return (
            "M " +
            d.source.x +
            " " +
            d.source.y +
            " L " +
            d.target.x +
            " " +
            d.target.y
          );
        });

        edgelabels.attr("transform", function (d) {
          if (d.target.x < d.source.x) {
            var bbox = this.getBBox();

            rx = bbox.x + bbox.width / 2;
            ry = bbox.y + bbox.height / 2;
            return "rotate(180 " + rx + " " + ry + ")";
          } else {
            return "rotate(0)";
          }
        });
      }

      window.oncontextmenu = function(event) {
        event.preventDefault();
        return false;
      }

      function getBubbleMapData() {
        $.ajax({
          type: "GET",
          url: "http://localhost:3000/getBubbleMapData",
          dataType: "text",
          success: function(data) {
            drawBubbleMap();
            document.querySelector('.bubble-map-button').removeAttribute('disabled');
          },
          error: function(err) {
            console.log(err);
          }
        });
      }

      function checkForBubbleData() {
        $.ajax({
          type: "GET",
          url: "map-data.csv",
          dataType: "text",
          success: function(data) {
            if(data.length === 0) {
              getBubbleMapData();
            } else {
              document.querySelector('.bubble-map-button').removeAttribute('disabled');
            }
          },
          error: function(err) {
            console.log(err);
            getBubbleMapData();
          }
        });
      }

      const API_URL = 'http://localhost:3000/';
      $(document).ready(function() {
        checkForBubbleData();
        getDocumentData();
        $('select').select2();
        $('select').on('change',function(){
          var file = $(this).val();
          var fileNameShort = file.split(".").slice(0, -1).join(".");
          $.ajax({
            url: API_URL+'readFile/'+file,
            success: (data)=>{
              var note = `
              <div class="note the-node" id='`+fileNameShort+`' style="z-index: 999;">
                <div class='close_note'>X</div>
                <h3>`+fileNameShort+`</h3>
                <p style="cursor:text;">
                  `+data+`
                </p>
              </div>
              `;
              $("#board").append(note);
              $(".note").css('z-index',99).draggable({
                containment: "#board",
                grid: [5, 5],
                cancel: "p, .matrix-data"
              });

            /*  var words = $( ".note#"+fileNameShort+" p" ).first().text().split( /\s+/ );
              var text = words.join( "</span> <span>" );
              $( ".note#"+fileNameShort+" p").first().html( "<span>" + text + "</span>" );
              $( document ).on( "click", ".note#"+fileNameShort+" span", function() {
                $( this ).css( "background-color", "red" );
              });*/

              document.querySelector('#' + fileNameShort + ' p').addEventListener('mouseup', function(event) {
                if(window.getSelection) {
                  let selection = window.getSelection();
                  if(event.button === 2) {
                    let $event = event;
                    const fE = event.target;
                    document.querySelector('.custom-menu').style.display = 'block';
                    document.querySelector('.custom-menu').style.left = event.clientX + 'px';
                    document.querySelector('.custom-menu').style.top = event.clientY + 'px';

                    let range = selection.getRangeAt(0);

                    document.querySelectorAll('.menu-item')[0].addEventListener('click', function(e) {
                      document.querySelector('.custom-menu').style.display = 'none';
                      if (range) {
                        selection.removeAllRanges();
                        selection.addRange(range);
                      }

                      document.designMode = "on";
                      document.execCommand("backColor", true, "yellow");
                      document.execCommand("foreColor", true, "black");
                      document.designMode = "off";

                      selection.removeAllRanges();
                    });

                    document.querySelectorAll('.menu-item')[1].addEventListener('click', function(e) {
                      document.querySelector('.custom-menu').style.display = 'none';
                      if(fE.tagName === 'FONT') {
                        $(fE).unwrap();
                        $($(fE)[0].childNodes[0]).unwrap()
                      }
                    });
                  }
                } 
              });
            }
          })
        });
	  //right click function

	//drag function for dialog box  
        $(document).on('drag', '.note', function(){
          $(this).click();
        })
        $(document).on('click', '.note', function(){
          $('.note').css('z-index', 9);
          $(this).css('z-index', 99);
        });

        $(document).on('click','.note .close_note',function(event){
          if($(this).parent().hasClass('custom-data')) {
            $(this).parent().hide();
          } else {
            $(this).parent().detach();
          }

          lineDataCollection = [];
          connections = [];
          document.querySelectorAll('.link-new').forEach(ele => {
            ele.remove();
          });
        });
      
        document.querySelector('.matrix-button').addEventListener('click', function() {
          document.querySelector('.right .matrix-data-box').style.display = 'block';
          $('.note').css('z-index', 9);
          document.querySelector('.right .matrix-data-box').style.zIndex = 99;
        });

        document.querySelector('.graph-button').addEventListener('click', function() {
          document.querySelector('.right .all-data-box').style.display = 'block';
          $('.note').css('z-index', 9);
          document.querySelector('.right .all-data-box').style.zIndex = 99;
          pObj = panzoom(document.querySelector('.all-data'), {
            beforeMouseDown: function(e) {
              var shouldIgnore = !e.altKey;
              return shouldIgnore;
            },
            beforeWheel: function(e) {
              var shouldIgnore = !e.altKey;
              return shouldIgnore;
            }
          })
          .zoomAbs(
            100, // initial x position
            230, // initial y position
            2 // initial zoom 
          );
        });

        document.querySelector('.bubble-map-button').addEventListener('click', function() {
          document.querySelector('.right .bubblemap-box').style.display = 'block';
          $('.note').css('z-index', 9);
          document.querySelector('.right .bubblemap-box').style.zIndex = 99;
          drawBubbleMap();
          panzoom(document.querySelector('.bubblemap'), {
            beforeMouseDown: function(e) {
              var shouldIgnore = !e.altKey;
              return shouldIgnore;
            }
          });
        });

        function getAllData() {
          var xhttp = new XMLHttpRequest();
          xhttp.onreadystatechange = function() {
            if (this.readyState == 4 && this.status == 200) {
              let txt = this.responseText;
              
              document.querySelector('.all-data').innerHTML = this.responseText;
              const matrixElement = document.createElement('div');
              matrixElement.innerHTML = document.querySelectorAll('.all-data .container')[0].outerHTML + document.querySelectorAll('.all-data .container')[1].outerHTML;
              matrixElement.classList.add('matrix-element');
              document.body.appendChild(matrixElement);

              processMatrix();

              domtoimage.toSvg(matrixElement).then(function(svgUrl) {
                document.querySelector('.right .matrix-data').innerHTML = `${svgUrl.split('data:image/svg+xml;charset=utf-8,')[1]}`;
              });

              const containers = document.querySelectorAll('.all-data .container');
              containers[0].remove();
              containers[1].remove();

              document.querySelector('.all-data').childNodes[0].remove();

              matrixElement.style.display = 'none';
            }
          };
          xhttp.open("GET", "http://localhost:3000/getAllData", true);
          xhttp.send();
        }
      
        getAllData();

        $(".note").css('z-index',99).draggable({
          containment: "#board",
          grid: [5, 5],
          cancel: "p"
        });

        $( ".note.matrix-data-box" ).resizable();
        $( ".note.all-data-box" ).resizable();
        $( ".note.bubblemap-box" ).resizable();
      });


      // const coord = lineCanvas.createSVGPoint().matrixTransform(this.getScreenCTM().inverse())
        // const source = {
        //   x: (-coord.x) - this.getBBox().x + this.getBBox().width,
        //   y: (-coord.y) + this.getBBox().y + this.getBBox().height
        // };

        // const personIndex = personsCollection.indexOf(this.getAttribute('data-name'));
        // const targetElement = document.querySelector('[data-name=person' + personIndex + ']');

        // const coord2 = lineCanvas.createSVGPoint().matrixTransform(targetElement.getScreenCTM().inverse())
        // const target = {
        //   x: targetElement.getBoundingClientRect().left - 230,
        //   y: targetElement.getBoundingClientRect().top
        // }

        // var c = document.getElementById("line-canvas");
        // var ctx = c.getContext("2d");
        // ctx.beginPath();
        // ctx.moveTo(source.x, target.x);
        // ctx.lineTo(source.y, target.y);
        // ctx.strokeStyle = "red";
        // ctx.stroke();
        // var newLine = document.createElementNS('http://www.w3.org/2000/svg','line');
        // newLine.setAttribute('id','line1');
        // newLine.setAttribute('x1',source.x);
        // newLine.setAttribute('y1',source.y);
        // newLine.setAttribute('x2',target.x);
        // newLine.setAttribute('y2',target.y);
        // newLine.setAttribute("stroke", "yellow");
        // newLine.setAttribute("stroke-width", 6);
        // c.appendChild(newLine);
    </script>
  </body>
</html>
